<?php

namespace Drupal\node_subscribe\Plugin\Block;

use Drupal\Core\Block\BlockBase;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\StringTranslationTrait;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Provides a Node Watcher block.
 *
 * @Block(
 *   id= "node_subscribe",
 *   admin_label = @Translation("Node Subscribe Block"),
 *   category = @Translation("Node Subscribe"),
 * )
 */
class NodeSubscribeBlock extends BlockBase implements ContainerFactoryPluginInterface {

  use StringTranslationTrait;

  /**
   * The currently active route match object.
   *
   * @var \Drupal\Core\Routing\RouteMatchInterface
   */
  protected $routeMatchInterface;

  /**
   * {@inheritdoc}
   */
  public function __construct(
    array $configuration,
    $plugin_id,
    $plugin_definition,
    RouteMatchInterface $route_match_interface
  ) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
    $this->routeMatchInterface = $route_match_interface;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(
    ContainerInterface $container,
    array $configuration,
    $plugin_id,
    $plugin_definition
  ) {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
      $container->get('current_route_match')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function build() {
    // user_cookie_save(['subscription_token' => "autogeneratedtoken2"]);.
    $node = $this->routeMatchInterface->getParameter('node');
    if ($node) {

      // Setup data first.
      // if (isset($_COOKIE['Drupal_visitor_subscription_token'])) {
      // $token = $_COOKIE['Drupal_visitor_subscription_token'];
      // }
      // else {
      // $token = NULL;
      // }
      // $nid = $node->id();
      // $subscriber = new Subscriber($nid, $token);.
      return [
        '#attached' => [
          'library' => [
            'node_subscribe/node_subscribe.form',
          ],
        ],
        '#markup' => "<div id='node-subscribe-form'></div>",
      ];

    }
    else {
      return [
        '#markup' => $this->t('Not a Node'),
        '#cache' => [
          'max-age' => 0,
        ],
      ];
    }
  }

}
